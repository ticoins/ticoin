//ticoin Copyright (c) 2011 The LevelDB Authors. All rights reserved.
//ticoin Use of this source code is governed by a BSD-style license that can be
//ticoin found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <stddef.h>

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

//ticoin DB contents are stored in a set of blocks, each of which holds a
//ticoin sequence of key,value pairs.  Each block may be compressed before
//ticoin being stored in a file.  The following enum describes which
//ticoin compression method (if any) is used to compress a block.
enum CompressionType {
  //ticoin NOTE: do not change the values of existing entries, as these are
  //ticoin part of the persistent format on disk.
  kNoCompression     = 0x0,
  kSnappyCompression = 0x1
};

//ticoin Options to control the behavior of a database (passed to DB::Open)
struct Options {
  //ticoin -------------------
  //ticoin Parameters that affect behavior

  //ticoin Comparator used to define the order of keys in the table.
  //ticoin Default: a comparator that uses lexicographic byte-wise ordering
  //
  //ticoin REQUIRES: The client must ensure that the comparator supplied
  //ticoin here has the same name and orders keys *exactly* the same as the
  //ticoin comparator provided to previous open calls on the same DB.
  const Comparator* comparator;

  //ticoin If true, the database will be created if it is missing.
  //ticoin Default: false
  bool create_if_missing;

  //ticoin If true, an error is raised if the database already exists.
  //ticoin Default: false
  bool error_if_exists;

  //ticoin If true, the implementation will do aggressive checking of the
  //ticoin data it is processing and will stop early if it detects any
  //ticoin errors.  This may have unforeseen ramifications: for example, a
  //ticoin corruption of one DB entry may cause a large number of entries to
  //ticoin become unreadable or for the entire DB to become unopenable.
  //ticoin Default: false
  bool paranoid_checks;

  //ticoin Use the specified object to interact with the environment,
  //ticoin e.g. to read/write files, schedule background work, etc.
  //ticoin Default: Env::Default()
  Env* env;

  //ticoin Any internal progress/error information generated by the db will
  //ticoin be written to info_log if it is non-NULL, or to a file stored
  //ticoin in the same directory as the DB contents if info_log is NULL.
  //ticoin Default: NULL
  Logger* info_log;

  //ticoin -------------------
  //ticoin Parameters that affect performance

  //ticoin Amount of data to build up in memory (backed by an unsorted log
  //ticoin on disk) before converting to a sorted on-disk file.
  //
  //ticoin Larger values increase performance, especially during bulk loads.
  //ticoin Up to two write buffers may be held in memory at the same time,
  //ticoin so you may wish to adjust this parameter to control memory usage.
  //ticoin Also, a larger write buffer will result in a longer recovery time
  //ticoin the next time the database is opened.
  //
  //ticoin Default: 4MB
  size_t write_buffer_size;

  //ticoin Number of open files that can be used by the DB.  You may need to
  //ticoin increase this if your database has a large working set (budget
  //ticoin one open file per 2MB of working set).
  //
  //ticoin Default: 1000
  int max_open_files;

  //ticoin Control over blocks (user data is stored in a set of blocks, and
  //ticoin a block is the unit of reading from disk).

  //ticoin If non-NULL, use the specified cache for blocks.
  //ticoin If NULL, leveldb will automatically create and use an 8MB internal cache.
  //ticoin Default: NULL
  Cache* block_cache;

  //ticoin Approximate size of user data packed per block.  Note that the
  //ticoin block size specified here corresponds to uncompressed data.  The
  //ticoin actual size of the unit read from disk may be smaller if
  //ticoin compression is enabled.  This parameter can be changed dynamically.
  //
  //ticoin Default: 4K
  size_t block_size;

  //ticoin Number of keys between restart points for delta encoding of keys.
  //ticoin This parameter can be changed dynamically.  Most clients should
  //ticoin leave this parameter alone.
  //
  //ticoin Default: 16
  int block_restart_interval;

  //ticoin Compress blocks using the specified compression algorithm.  This
  //ticoin parameter can be changed dynamically.
  //
  //ticoin Default: kSnappyCompression, which gives lightweight but fast
  //ticoin compression.
  //
  //ticoin Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //ticoin    ~200-500MB/s compression
  //ticoin    ~400-800MB/s decompression
  //ticoin Note that these speeds are significantly faster than most
  //ticoin persistent storage speeds, and therefore it is typically never
  //ticoin worth switching to kNoCompression.  Even if the input data is
  //ticoin incompressible, the kSnappyCompression implementation will
  //ticoin efficiently detect that and will switch to uncompressed mode.
  CompressionType compression;

  //ticoin If non-NULL, use the specified filter policy to reduce disk reads.
  //ticoin Many applications will benefit from passing the result of
  //ticoin NewBloomFilterPolicy() here.
  //
  //ticoin Default: NULL
  const FilterPolicy* filter_policy;

  //ticoin Create an Options object with default values for all fields.
  Options();
};

//ticoin Options that control read operations
struct ReadOptions {
  //ticoin If true, all data read from underlying storage will be
  //ticoin verified against corresponding checksums.
  //ticoin Default: false
  bool verify_checksums;

  //ticoin Should the data read for this iteration be cached in memory?
  //ticoin Callers may wish to set this field to false for bulk scans.
  //ticoin Default: true
  bool fill_cache;

  //ticoin If "snapshot" is non-NULL, read as of the supplied snapshot
  //ticoin (which must belong to the DB that is being read and which must
  //ticoin not have been released).  If "snapshot" is NULL, use an impliicit
  //ticoin snapshot of the state at the beginning of this read operation.
  //ticoin Default: NULL
  const Snapshot* snapshot;

  ReadOptions()
      : verify_checksums(false),
        fill_cache(true),
        snapshot(NULL) {
  }
};

//ticoin Options that control write operations
struct WriteOptions {
  //ticoin If true, the write will be flushed from the operating system
  //ticoin buffer cache (by calling WritableFile::Sync()) before the write
  //ticoin is considered complete.  If this flag is true, writes will be
  //ticoin slower.
  //
  //ticoin If this flag is false, and the machine crashes, some recent
  //ticoin writes may be lost.  Note that if it is just the process that
  //ticoin crashes (i.e., the machine does not reboot), no writes will be
  //ticoin lost even if sync==false.
  //
  //ticoin In other words, a DB write with sync==false has similar
  //ticoin crash semantics as the "write()" system call.  A DB write
  //ticoin with sync==true has similar crash semantics to a "write()"
  //ticoin system call followed by "fsync()".
  //
  //ticoin Default: false
  bool sync;

  WriteOptions()
      : sync(false) {
  }
};

}  //ticoin namespace leveldb

#endif  //ticoin STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
