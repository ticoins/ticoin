/**-5-10Copyright (c) 2012 The ticoin developers
/**-5-10Distributed under the MIT/X11 software license, see the accompanying
/**-5-10file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "version.h"

#include <string>

/**-5-10Name of client reported in the 'version' message. Report the same name
/**-5-10for both ticoind and ticoin-qt, to make it harder for attackers to
/**-5-10target servers or GUI users specifically.
const std::string CLIENT_NAME("Satoshi");

/**-5-10Client version number
#define CLIENT_VERSION_SUFFIX   "-beta"


/**-5-10The following part of the code determines the CLIENT_BUILD variable.
/**-5-10Several mechanisms are used for this:
/**-5-10* first, if HAVE_BUILD_INFO is defined, include build.h, a file that is
/**-5-10  generated by the build environment, possibly containing the output
/**-5-10  of git-describe in a macro called BUILD_DESC
/**-5-10* secondly, if this is an exported version of the code, GIT_ARCHIVE will
/**-5-10  be defined (automatically using the export-subst git attribute), and
/**-5-10  GIT_COMMIT will contain the commit id.
/**-5-10* then, three options exist for determining CLIENT_BUILD:
/**-5-10  * if BUILD_DESC is defined, use that literally (output of git-describe)
/**-5-10  * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]
/**-5-10  * otherwise, use v[maj].[min].[rev].[build]-unk
/**-5-10finally CLIENT_VERSION_SUFFIX is added

/**-5-10First, include build.h if requested
#ifdef HAVE_BUILD_INFO
#    include "build.h"
#endif

/**-5-10git will put "#define GIT_ARCHIVE 1" on the next line inside archives. 
#define GIT_ARCHIVE 1
#ifdef GIT_ARCHIVE
#    define GIT_COMMIT_ID "460ccfb7b1d"
#    define GIT_COMMIT_DATE "Thu, 15 Oct 2015 11:21:17 +0200"
#endif

#define BUILD_DESC_WITH_SUFFIX(maj,min,rev,build,suffix) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-" DO_STRINGIZE(suffix)

#define BUILD_DESC_FROM_COMMIT(maj,min,rev,build,commit) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-g" commit

#define BUILD_DESC_FROM_UNKNOWN(maj,min,rev,build) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-unk"

#ifndef BUILD_DESC
#    ifdef BUILD_SUFFIX
#        define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)
#    elif defined(GIT_COMMIT_ID)
#        define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)
#    else
#        define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)
#    endif
#endif

#ifndef BUILD_DATE
#    ifdef GIT_COMMIT_DATE
#        define BUILD_DATE GIT_COMMIT_DATE
#    else
#        define BUILD_DATE __DATE__ ", " __TIME__
#    endif
#endif

const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);
const std::string CLIENT_DATE(BUILD_DATE);
